{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","visiblelist","Card","card","index","onClick","returned","className","includes","GuessCount","victory","score","App","props","HandleCardClick","state","guessed","returnedcards","length","setState","CheckPair","GetScore","console","log","CheckReturn","CheckGuessed","states","cards","prevState","guessedcards","setTimeout","CreateCards","result","candidates","split","SIDE","pop","push","this","CheckVictory","map","React","Component","Timer","time","seconds","timer","startTimer","bind","countDown","secs","divisor_for_minutes","divisor_for_seconds","Math","floor","ceil","timeLeftVar","secondsToTime","setInterval","clearInterval","m","s","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.248bd74a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst SIDE = 4\n\nconst cards = '😀 🎉 💖 🎩 🐶 🐱 🦄 🐬 🌍 🌛 🌞 💫 🍎 🍌 🍓 🍐 🍟 🍿'\n\nconst visiblelist = ['visible', 'visible wrong', 'visible guessed']\n\nconst Card = ({card, index, onClick, returned}) => (\n    <div className={`card ${returned}`} onClick={() => onClick(index)}>\n        {visiblelist.includes(returned) ? card : \"?\"}\n    </div>\n)\n\n\nconst GuessCount = ({victory, score }) => {\n    if (!victory)\n        return <div className=\"score\">{score}</div>\n    else{\n        return <div className=\"score\">Victory {score}</div>\n\n    }\n}\n\n\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { cards: this.CreateCards(),\n                        returnedcards : [],\n                        guessed: [],\n                        score : 0}\n        }\n\n    CreateCards(){\n        const result = []\n        const size = SIDE * SIDE\n        const candidates = cards.split(\" \")\n        while (result.length < size) {\n            const card = candidates.pop()\n            result.push(card, card)\n        }\n        return result\n    }\n    HandleCardClick = (index) => {\n            if (!this.state.guessed.includes(index)) {\n                if (this.state.returnedcards.length === 0) {\n                    this.setState({returnedcards: [index]})\n                } else if (this.state.returnedcards.length === 1 && this.state.returnedcards[0] !== index) {\n                    this.CheckPair(index)\n                }\n\n            }\n    }\n\n    GetScore = () => {\n        console.log(this.state.score)\n        return this.state.score\n    }\n\n    CheckReturn = (index) => {\n        const pair = this.state.returnedcards;\n\n        if (pair.includes(index) || this.state.guessed.includes(index)){\n            if (this.CheckGuessed(index))\n                return 'visible guessed'\n            if (this.state.returnedcards.length === 2)\n                return 'visible wrong'\n            return 'visible'\n        }\n        return 'hidden'\n\n    }\n\n    CheckPair = (index) => {\n        const states = this.state;\n        if (states.cards[states.returnedcards[0]] === states.cards[index]){ \n            this.setState((prevState)=>{\n                const returned = prevState.returnedcards[0];\n                const guessedcards = [index,returned];\n\n\n                return {guessed : [...prevState.guessed,...guessedcards], score : prevState.score+=3, returnedcards : [states.returnedcards[0], index]}\n            })\n\n        } else {\n          this.setState((prevState)=>{\n                return ({score : prevState.score-=1, returnedcards : [states.returnedcards[0], index]})\n            })\n        }\n\n        setTimeout( () => this.setState({returnedcards : []}), 750)\n    }\n    CheckGuessed = (index) => {\n        const guessedcards = this.state.guessed;\n        if(guessedcards.includes(index)) {\n            return true\n        }\n        return false\n    }\n\n    CheckVictory() {\n        return this.state.guessed.length === this.state.cards.length\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"memory\">\n                <Timer/>\n                <GuessCount victory={this.CheckVictory()} score={this.state.score}/>\n                {this.state.cards.map((card, index) =>\n                    <Card\n                        index={index}\n                        card={card}\n                        returned={this.CheckReturn(index)}\n                        onClick={this.HandleCardClick}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\n\nclass Timer extends React.Component {\n    constructor() {\n        super();\n        this.state = { time: {}, seconds: 100 };\n        this.timer = 0;\n        this.startTimer = this.startTimer.bind(this);\n        this.countDown = this.countDown.bind(this);\n    }\n\n    secondsToTime(secs){\n        let hours = Math.floor(secs / (60 * 60));\n\n        let divisor_for_minutes = secs % (60 * 60);\n        let minutes = Math.floor(divisor_for_minutes / 60);\n\n        let divisor_for_seconds = divisor_for_minutes % 60;\n        let seconds = Math.ceil(divisor_for_seconds);\n\n        let obj = {\n            \"h\": hours,\n            \"m\": minutes,\n            \"s\": seconds\n        };\n        return obj;\n    }\n\n    componentDidMount() {\n        let timeLeftVar = this.secondsToTime(this.state.seconds);\n        this.setState({ time: timeLeftVar });\n    }\n\n    startTimer() {\n        if (this.timer === 0 && this.state.seconds > 0) {\n            this.timer = setInterval(this.countDown, 1000);\n        }\n    }\n\n    countDown() {\n        // Remove one second, set state so a re-render happens.\n        let seconds = this.state.seconds - 1;\n        this.setState({\n            time: this.secondsToTime(seconds),\n            seconds: seconds,\n        });\n\n        // Check if we're at zero.\n        if (seconds === 0) {\n            clearInterval(this.timer);\n        }\n    }\n\n    render() {\n        return(\n            <div>\n                <button onClick={this.startTimer}>Start</button>\n                m: {this.state.time.m} s: {this.state.time.s}\n            </div>\n        );\n    }\n}\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n    <React.StrictMode>\n        <div>\n            <Timer/>\n        </div>\n    </React.StrictMode>,\n    document.getElementById('timer')\n);\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}